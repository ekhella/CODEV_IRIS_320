import matplotlib.pyplot as plt
#from VideoConstructor import convert_time_format_to_ms

def convert_time_format_to_s(time_format):
        """
        Converts milliseconds to time format
        Input : Time in HH:MM:SS
        Output : Time in ms (ending with 3 zeros)
        """
        heures, minutes, secondes = map(int, time_format.split(':'))
        s_heures = heures * 3600
        s_minutes = minutes * 60
        s_secondes = secondes
        time_in_s = s_heures + s_minutes + s_secondes
        return time_in_s

def marker_format_to_meters(marker_format):
    '''
    Input : marker format KKK+MMM
    Output : marker format in meters 
    '''
    marker_format_list = list(marker_format)
    marker_format_list.pop(3)
    new_marker_meter = ''.join(marker_format_list)
    return float(new_marker_meter)

def get_markers_by_frame(data, frame_num):
    markers = []
    for key, value in data.items():
        if int(key) == frame_num:
            markers.append(marker_format_to_meters(value['marker']))
    return markers

def read_data_from_file(file_path):
    data = {}
    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            frame_data = eval(line)
            frame_num = list(frame_data.keys())[0]
            data[frame_num] = frame_data[frame_num]
    return data

# Chemin du fichier texte
file_path = "videotreatment.txt"

# Lire les données à partir du fichier
data = read_data_from_file(file_path)

# Récupérer les mètres pour chaque numéro de trame
frames = list(data.keys())
markers_meters = [marker_format_to_meters(data[frame]['marker']) for frame in frames]
times_seconds = [convert_time_format_to_s(data[frame]['time']) for frame in frames]

# Tracer l'évolution des mètres en fonction du numéro de frame
plt.plot(frames, markers_meters, marker='o', linestyle='-')
plt.xlabel('Numéro de frame')
plt.ylabel('Mètres')
plt.title('Évolution des mètres en fonction du numéro de frame')
plt.grid(True)
plt.show()

# Tracer l'évolution du temps en fonction du numéro de frame
plt.plot(frames, times_seconds, marker='o', linestyle='-')
plt.xlabel('Numéro de frame')
plt.ylabel('Temps (secondes)')
plt.title('Évolution du temps en fonction du numéro de frame')
plt.grid(True)
plt.show()